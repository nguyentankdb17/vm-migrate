- name: Prepare venv and install openstacksdk
  hosts: src_cloud
  vars_files:
    - src-vars.yml
  tasks:
    - name: Ensure python3-venv and pip are installed
      apt:
        name:
          - python3-venv
          - python3-pip
        state: present
      when: ansible_os_family | default('') == "Debian"

    - name: Create Python virtual environment if not exists
      command: "python3 -m venv {{ venv_path }}"
      args:
        creates: "{{ venv_path }}/bin/activate"

    - name: Ensure openstacksdk is installed in virtualenv
      ansible.builtin.pip:
        name: openstacksdk
        virtualenv: "{{ venv_path }}"
        virtualenv_command: python3 -m venv

- name: Create info directory and export vm info
  hosts: src_cloud
  vars_files:
    - src-vars.yml
  tasks:
    - name: Get VM details
      openstack.cloud.server_info:
        auth: "{{ cloud_config.auth }}"
        name: "{{ vm_name }}"
      register: vm_info

    - name: Create directory to store yaml files
      file:
        path: /tmp/{{ vm_info.servers[0].name }}
        state: directory
        mode: '0755'

    - name: Save info to YAML file
      copy:
        content: "{{ vm_info | to_nice_yaml }}"
        dest: "/tmp/{{ vm_info.servers[0].name }}/vm_info.yaml"

- name: Export flavor, image, keypair and security group info
  hosts: src_cloud
  vars_files:
    - src-vars.yml
  tasks:
    - name: Filter flavor info
      openstack.cloud.compute_flavor_info:
        auth: "{{ cloud_config.auth }}"
        name: "{{ vm_info.servers[0].flavor.name }}"
      register: flavor_info
      when:
        - vm_info.servers is defined
        - vm_info.servers | length > 0
        - vm_info.servers[0].flavor is defined

    - name: Save flavor info
      copy:
        content: "{{ flavor_info | to_nice_yaml }}"
        dest: "/tmp/{{ vm_info.servers[0].name }}/flavor_info.yaml"
      when:
        - flavor_info is defined
        - not flavor_info.skipped | default(false)

    - name: Filter image info
      openstack.cloud.image_info:
        auth: "{{ cloud_config.auth }}"
        name: "{{ vm_info.servers[0].image.name }}"
      register: image_info
      when:
        - vm_info.servers is defined
        - vm_info.servers | length > 0
        - vm_info.servers[0].image is defined
        - vm_info.servers[0].image | length > 0

    - name: Save image info
      copy:
        content: "{{ image_info | to_nice_yaml }}"
        dest: "/tmp/{{ vm_info.servers[0].name }}/image_info.yaml"
      when:
        - image_info is defined
        - not image_info.skipped | default(false)

    - name: Filter keypair info
      openstack.cloud.keypair_info:
        auth: "{{ cloud_config.auth }}"
        name: "{{ vm_info.servers[0].key_name }}"
      register: keypair_info
      when:
        - vm_info.servers is defined
        - vm_info.servers | length > 0
        - vm_info.servers[0].key_name is defined
        - vm_info.servers[0].key_name | length > 0

    - name: Save keypair info
      copy:
        content: "{{ keypair_info | to_nice_yaml }}"
        dest: "/tmp/{{ vm_info.servers[0].name }}/keypair_info.yaml"
      when:
        - keypair_info is defined
        - not keypair_info.skipped | default(false)

    - name: Filter security groups matched
      openstack.cloud.security_group_info:
        auth: "{{ cloud_config.auth }}"
        name: "{{ item.name }}"
        project_id: "{{ vm_info.servers[0].project_id }}"
      loop: "{{vm_info.servers[0].security_groups}}"
      register: sg_filtered_results
      when:
        - vm_info.servers[0].security_groups is defined
        - vm_info.servers[0].security_groups | length > 0
    
    - name: Merge filtered results
      set_fact:
        security_group_info:
          security_groups: "{{ sg_filtered_results.results | map(attribute='security_groups') | flatten | unique(attribute='id') }}"
      when:
        - not sg_filtered_results.skipped | default(false)

    - name: Save security group info
      copy:
        content: "{{ security_group_info | to_nice_yaml(indent=2) }}"
        dest: "/tmp/{{ vm_info.servers[0].name }}/security_group_info.yaml"
      when:
        - security_group_info is defined
        - not security_group_info.skipped | default(false)


- name: Export network components info
  hosts: src_cloud
  vars_files:
    - src-vars.yml
  tasks:
    - name: Extract all MAC addresses from all networks
      set_fact:
        vm_mac_addresses: >-
          {{ (vm_mac_addresses | default([])) 
            | union([item.1['OS-EXT-IPS-MAC:mac_addr']]) }}
      with_subelements:
        - "{{ vm_info.servers[0].addresses | dict2items }}"
        - value

    - name: Filter all ports matched with respective MAC addresses
      openstack.cloud.port_info:
        auth: "{{ cloud_config.auth }}"
        filters:
          mac_address: "{{ item }}"
          project_id: "{{ vm_info.servers[0].project_id }}"
          status: ACTIVE
      loop: "{{ vm_mac_addresses }}"
      register: port_filtered_results
      when:
        - vm_mac_addresses is defined
        - vm_mac_addresses | length > 0

    - name: Merge filtered results
      set_fact:
        ports_info: "{{ port_filtered_results.results | map(attribute='ports') | flatten | unique }}"
      when:
        - not port_filtered_results.skipped | default(false)
    
    - name: Filter floating ips attached with respective fixed ip
      openstack.cloud.floating_ip_info:
        auth: "{{ cloud_config.auth }}"
        fixed_ip_address: "{{ item.fixed_ips[0].ip_address }}"
        project_id: "{{ vm_info.servers[0].project_id }}"
      loop: "{{ports_info}}"
      register: fip_filtered_results
      when:
        - ports_info is defined
        - ports_info | length > 0

    - name: Merge filtered results
      set_fact:
        floating_ips_info:
          floating_ips: "{{ fip_filtered_results.results | map(attribute='floating_ips') | flatten | unique }}"
      when:
        - fip_filtered_results is defined
        - fip_filtered_results | length > 0

    - name: Save floating ips info
      copy:
        content: "{{ floating_ips_info | to_nice_yaml(indent=2) }}"
        dest: "/tmp/{{ vm_info.servers[0].name }}/floating_ips_info.yaml"
      when:
        - floating_ips_info is defined
        - floating_ips_info.floating_ips | length > 0
        - not floating_ips_info.skipped | default(false)

    - name: Filter networks matched with respective port
      openstack.cloud.networks_info:
        auth: "{{ cloud_config.auth }}"
        filters:
          id: "{{ item.network_id }}"
          project_id: "{{ vm_info.servers[0].project_id }}"
      loop: "{{ports_info}}"
      register: networks_filtered_results
      when:
        - ports_info is defined
        - ports_info | length > 0
    
    - name: Filter floating ip network matched with respective floating ip
      openstack.cloud.networks_info:
        auth: "{{ cloud_config.auth }}"
        filters:
          id: "{{ item.floating_network_id }}"
          project_id: "{{ vm_info.servers[0].project_id }}"
      loop: "{{floating_ips_info.floating_ips}}"
      register: fip_network_filtered_results
      when:
        - floating_ips_info is defined
        - floating_ips_info.floating_ips is defined
        - floating_ips_info.floating_ips | length > 0

    - name: Merge all filtered networks
      set_fact:
        networks_info:
          networks: >-
            {{
              (
                (networks_filtered_results.results | map(attribute='networks') | flatten | unique | default([]))
                +
                (fip_network_filtered_results.results | map(attribute='networks') | flatten | unique | default([]))
              )
            }}
      when:
        - networks_filtered_results is defined
        - fip_network_filtered_results is defined

    - name: Save networks info
      copy:
        content: "{{ networks_info | to_nice_yaml(indent=2) }}"
        dest: "/tmp/{{ vm_info.servers[0].name }}/networks_info.yaml"
      when:
        - networks_info is defined
        - not networks_info.skipped | default(false)

    - name: Filter subnets matched with respective network
      openstack.cloud.subnets_info:
        auth: "{{ cloud_config.auth }}"
        filters:
          id: "{{ item.1 }}"
          project_id: "{{ vm_info.servers[0].project_id }}"
      loop: "{{ networks_info.networks | subelements('subnet_ids') }}"
      register: subnets_filtered_results
      when:
        - networks_info is defined
        - networks_info.networks is defined
        - networks_info.networks | length > 0

    - name: Merge filtered results
      set_fact:
        subnets_info:
          subnets: "{{(subnets_filtered_results.results | map(attribute='subnets') | flatten | unique | default([]))}}"
      when:
        - subnets_filtered_results is defined
        - subnets_filtered_results | length > 0
        - not subnets_filtered_results.skipped | default(false)

    - name: Save subnets info
      copy:
        content: "{{ subnets_info | to_nice_yaml(indent=2) }}"
        dest: "/tmp/{{ vm_info.servers[0].name }}/subnets_info.yaml"
      when:
        - subnets_info is defined
        - not subnets_info.skipped | default(false)

    - name: Filter router matched with respective floating ip
      openstack.cloud.routers_info:
        auth: "{{ cloud_config.auth }}"
        filters:
          id: "{{ item.router_id }}"
          project_id: "{{ vm_info.servers[0].project_id }}"
      loop: "{{floating_ips_info.floating_ips}}"
      register: routers_filtered_results
      when:
        - floating_ips_info.floating_ips is defined
        - floating_ips_info.floating_ips | length > 0

    - name: Merge filtered results
      set_fact:
        routers_info:
          routers: "{{ routers_filtered_results.results | map(attribute='routers') | flatten | unique }}"
      when:
        - routers_filtered_results is defined
        - not routers_filtered_results.skipped | default(false)
        - routers_filtered_results | length > 0

    - name: Save router info
      copy:
        content: "{{ routers_info | to_nice_yaml(indent=2) }}"
        dest: "/tmp/{{ vm_info.servers[0].name }}/routers_info.yaml"
      when:
        - routers_info is defined
        - not routers_info.skipped | default(false)
